using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using DG.Tweening;


public class Duplicater : MonoBehaviour {


    float[, ,] pattern_10 = {
         {
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},//fifth 1
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         }, 
         {
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},//fourth 1
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         }, 
         {
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},//third 1
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         }, 
         {
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},//second 1
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         }, 
         {
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},//mid1
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 99, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         },
         {
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},//mid2
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         },
         {
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},//second 2
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         }, 
         {
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},//third 2
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         }, 
         {
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},//fourth 2
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         }, 
         {
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},//fifth 2
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
         }
     };

    float[,,] pattern_09 = {
         {
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         },
         {
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 1, 1, 0},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {0, 2, 1, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         },
         {
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1, 1, 1, 1},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 2, 1, 1, 0, 0, 0},
         {0, 0, 2, 2, 1, 1, 1, 0, 0},
         {0, 0, 2, 2, 2, 1, 1, 0, 0},
         {0, 0, 2, 2, 2, 1, 1, 0, 0},
         {0, 0, 0, 2, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0, 0},
         },
    };

    float[,,] pattern_08 = {
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 2, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 0, 2, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 1, 1, 0},
         {2, 1, 1, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1, 1, 1},
         {0, 1, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 2, 2, 0, 0, 0},
         {0, 0, 2, 2, 2, 1, 0, 0},
         {0, 0, 2, 2, 2, 1, 0, 0},
         {0, 0, 0, 2, 2, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
    };

    float[,,] pattern_07 = {
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 2, 1, 1, 1, 0, 0},
         {0, 0, 2, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 1, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         },
    };

    float[,,] pattern_06 = {
         {
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {2, 1, 1, 1, 1, 1, 1},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 0, 0, 0},
         },
         {
         {0, 0, 0, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {2, 1, 1, 1, 1, 1, 1},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         },
    };

    float[,,] pattern_05 = {
         {
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 1, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {2, 1, 1, 1, 1, 1, 1},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 1, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 1, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0},
         },
    };

    float[,,] pattern_04 = {
         {
         {0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 0, 0},
         {0, 0, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 0},
         {0, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 1, 1, 0, 0},
         {0, 1, 1, 1, 1, 0},
         {2, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1},
         {0, 1, 1, 1, 1, 0},
         {0, 0, 1, 1, 0, 0},
         },
         {
         {0, 0, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 0},
         {2, 1, 1, 1, 1, 1},
         {2, 1, 1, 1, 1, 1},
         {0, 2, 1, 1, 1, 0},
         {0, 0, 1, 1, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0},
         {0, 0, 1, 1, 0, 0},
         {0, 2, 1, 1, 1, 0},
         {0, 2, 1, 1, 1, 0},
         {0, 0, 1, 1, 0, 0},
         {0, 0, 0, 0, 0, 0},
         },
         {
         {0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0},
         {0, 0, 2, 1, 0, 0},
         {0, 0, 2, 1, 0, 0},
         {0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0},
         },
    };

    float[,,] pattern_03 = {
         {
         {0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 1, 1, 1, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0},
         },
         {
         {0, 0, 1, 0, 0},
         {0, 2, 1, 1, 0},
         {2, 1, 1, 1, 1},
         {0, 2, 1, 1, 0},
         {0, 0, 1, 0, 0},
         },
         {
         {0, 0, 1, 0, 0},
         {0, 2, 1, 1, 0},
         {2, 1, 1, 1, 1},
         {0, 2, 1, 1, 0},
         {0, 0, 2, 0, 0},
         },
         {
         {0, 0, 0, 0, 0},
         {0, 0, 2, 0, 0},
         {0, 2, 2, 1, 0},
         {0, 0, 2, 0, 0},
         {0, 0, 0, 0, 0},
         },
    };

    float[,,] pattern_02 = {
         {
         {0, 0, 0, 0 },
         {0, 1, 1, 0 },
         {0, 1, 1, 0 },
         {0, 0, 0, 0 },
         },
         {
         {0, 2, 1, 0 },
         {2, 1, 1, 1 },
         {2, 1, 1, 1 },
         {0, 2, 1, 0 },
         },
         {
         {0, 2, 1, 0 },
         {2, 1, 1, 1 },
         {2, 1, 1, 1 },
         {0, 2, 1, 0 },
         },
         {
         {0, 0, 0, 0 },
         {0, 2, 1, 0 },
         {0, 2, 1, 0 },
         {0, 0, 0, 0 },
         }
    };

    float[,,] pattern_01 = {
         {
         {0, 1, 0 },
         {2, 1, 1 },
         {0, 1, 0 },
         },
         {
         {0, 2, 0 },
         {2, 1, 1 },
         {0, 2, 0 },
         },
         {
         {0, 2, 0 },
         {2, 2, 1 },
         {0, 2, 0 },
         }

    };

    public List<int> check_player_list;

    //all possible
    List<float[,,]> patterns;

    //specific chosen
    private float[, ,] pattern;

    private float patternWidth;
    private float patternHeight;
    private float patternDepth;

    List<GameObject> cubes_array;
    
    // Use this for initialization
    void Start()
    {
        DOTween.Init();

        patterns = new List<float[,,]>();
        patterns.Add(pattern_01);
        patterns.Add(pattern_02);
        patterns.Add(pattern_03);
        patterns.Add(pattern_04);
        patterns.Add(pattern_05);
        patterns.Add(pattern_06);
        patterns.Add(pattern_07);
        patterns.Add(pattern_08);
        patterns.Add(pattern_09);
        patterns.Add(pattern_10);
        //initCubes();

        cubes_array = new List<GameObject>();
        check_player_list = new List<int>();
    }

    public void initCubes(int amt, List<int> p_list)
    {

        //KILL PREVIOUS
        killCubes();

        pattern = patterns[amt];
        
        patternWidth = pattern.GetLength(0);
        patternHeight = pattern.GetLength(1);
        patternDepth = pattern.GetLength(2);

        int total = 0;
        int color_ptr = 0;
        bool color_block_flag = false;

        //If we have some users to apply to the cubes
        if(p_list.Count > 0)
        {
            color_block_flag = true;
            //Debug.Log("P LIST :" + p_list.Count + " first element " + p_list[0]);
        }

        for (int px = 0; px < patternWidth; ++px)
        {
            for (int py = 0; py < patternHeight; ++py)
            {
                for (int pz = 0; pz < patternDepth; ++pz)
                {
                    // If there is any item in pattern that doesn't
                    // match the array, stop, it's not a match.
                    if (pattern[px, py, pz] != 0)
                    {
                        //Debug.Log("x:" + px + " y:" + py + " z:" + pz);
                        total++;
                        
                        GameObject cube = MakeCube(px - (patternWidth-1)/2, py - (patternHeight-1)/2, pz - (patternDepth-1)/2);
                        //Debug.Log("x:" + (px - patternWidth / 2) + " y:" + (py - patternHeight / 2) + " z:" + (pz - patternDepth / 2));
                        //cube.layer = cube.layer.parent;
                        cubes_array.Add(cube);
                        //cube.transform.DOMove(new Vector3(0.0f, 0.0f, 0.0f), 0.5f).From();

                        if (pattern[px, py, pz] > 1 && color_block_flag)//special case start to color these
                        {

                            cube.GetComponent<MeshRenderer>().material.color = PlayerController.Instance.all_colors[p_list[color_ptr] - 1]; // for example
                            color_ptr++;

                            if(color_ptr >= p_list.Count)
                            {
                                color_block_flag = false;//stops the stream of colors
                            }
                      
                        }
                        else if(pattern[px, py, pz] == 99)
                        {
                            cube.GetComponent<MeshRenderer>().material.color = PlayerController.Instance.all_colors[0];
                            cube.name = "red";
                            //cube.GetComponent<MeshRenderer>().material.color = PlayerController.Instance.all_colors[PlayerController.Instance.activator - 1]; // for example
                            //Debug.Log("pattern 99 " + cube.transform.position);
                        }
                    }
                }
            }
        }

        //transform.Translate(new Vector3(0, 0, 0));
        //transform.Rotate(Vector3.up * -30);
        //transform.localScale = new Vector3(0.3F, 0.3F, 0.3F);

        transform.Rotate(Vector3.up*(-30));
        

        //NOW PLAY THE CUBE ANAIMTION
        playAnimation();
    }

    //

    void Update () {
        
        //transform.Rotate(Vector3.up*Time.deltaTime*3);

	}

    public void playAnimation()
    {

        //resetCubes();
        int counter = 0;
        foreach(GameObject cube in cubes_array)
        {
            counter++;
            cube.SetActive(true);
            //cube.transform.DOMove(new Vector3(Random.Range(-4.0f, 4.0f), Random.Range(-4.0f, 4.0f), Random.Range(-4.0f, 4.0f)), 1.0f).From().SetEase(Ease.InOutExpo);
            cube.transform.DOScale(0, 2).From().SetEase(Ease.InOutExpo).SetDelay(counter*0.005F);
        }

    }

    private void killCubes()
    {
        if(cubes_array.Count > 0) { 
            foreach (GameObject cube in cubes_array)
            {
                //cube.transform.parent = null;
                Destroy(cube);
            }
            
        }

        transform.localScale = new Vector3(1, 1, 1);
        transform.Rotate(Vector3.up);

        cubes_array = new List<GameObject>();
    }

    public void explode()
    {
        float count = 0;
        //Deb
        float offset_x = transform.position.x;

        foreach (GameObject cube in cubes_array)
        {
            //Debug.Log("CUBE " + cube.transform.position.x);
            if (cube.name != "red")
            {
                //Debug.Log("parent X " + transform.position.x);
                //cube.transform.DOMove(new Vector3(Random.Range(-6.0f, 6.0f), Random.Range(-5.0f, 5.0f), Random.Range(-18.0f, 0.0f)), 4).SetEase(Ease.OutExpo);
                cube.transform.DOScale(0, 1).SetEase(Ease.InExpo).SetDelay(0.5F);
            }
            else { 
                cube.transform.DOMove(new Vector3(0, 0, -20), 1).SetEase(Ease.OutQuad);
                cube.transform.DOScale(0, 1).SetEase(Ease.InExpo).SetDelay(2F);
                cube.transform.DOMove(new Vector3(0, 0, 0), 1).SetEase(Ease.OutQuad).SetDelay(count/10);
            }
            count++;
        }
    }


    GameObject MakeCube(float xpos, float ypos, float zpos)
    {
        //Debug.Log(xpos + ", " + ypos +  ", " + zpos);
        var cube = GameObject.CreatePrimitive(PrimitiveType.Cube);
        //cube.name = "_cube_";
        // color is controlled like this
        cube.GetComponent<MeshRenderer>().material.color = Color.white; // for example
        cube.transform.Translate(xpos, ypos, zpos);
        cube.transform.Rotate(0, 0, 0);
        cube.transform.localScale = new Vector3(0.90F, 0.90F, 0.90F);
        cube.transform.parent = transform;
        cube.layer = gameObject.layer;

        // There are lots more colours to choose
        return cube;
    }
}
